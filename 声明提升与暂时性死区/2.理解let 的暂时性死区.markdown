### 理解ES6中的let声明导致的暂时性死区
自ES5起，JavaScript中，执行上下文（Execution Context）的 变量对象 （variable object）修改成了 词法环境（Lexical Environment ）。

### 什么叫词法环境？
> 总的来说，词法环境就是某些语言中用来管理静态作用域的一种机制。词法环境（Lexical Environment）首次出现在ECMAScript-262-5版规范中（也就是ES5）.

### 作用域与静态作用域
作用域，就是将变量和值关联在一起的一个区域，或者说，作用域使得变量具有逻辑意义上的边界。 与执行上下文不是同一种概念。
作用域分为全局作用域、函数作用域以及块级作用域；在ES6之前，JS并没有实现块级作用域的语法，但是可以通过立即执行函数来实现近似的功能： 
~~~
 var x = 10;
 if(true){
     (function(arg){
         console.log(arg) //20
     })(20);   
 }
 console.log(x) //10
~~~
此外，ES中的try\catch语句也可实现块级作用域。

静态作用域又叫做词法作用域，静态表示一个标识符所在的作用域和它的涵义在程序解析阶段确定。也就是说，在程序运行前通过变量被定义的位置，决定它被约束于某个作用域


> 在ES6及以后，执行上下文的创建发生了改变

### ES6 执行上下文的结构：
- 创建词法环境 （组件）
- 创建变量环境 （组件）
- ThisBinding

词法环境是一种规范类型，基于代码词法的嵌套结构来记录标识符和具体变量或者函数的关联；简单来说，词法环境就是建立了标识符——变量的映射表。变量环境也是词法环境的一种

编译并创建执行上下文时：
- 函数内部通过var声明的变量，在编译阶段存放在 变量环境里。
- 通过let声明的变量，在编译阶段会存放到词法环境中
- 在函数内部的块作用域中，通过let声明的变量不会存放到词法环境中

执行到函数中块作用域：
- 块作用域let变量会存放在词法环境中独立的区域中，此区域不会影响块作用域外的变量
- 在词法环境内部，维护着一个小型的栈结构

### 作用域链
在每个执行上下文的变量环境中，都包含了一个外部引用，用来指向外部的执行上下文 - outer，由词法作用域 指定
> outer 指向 外层 执行上下文

### this
this是和执行上下文绑定的，也就是说每个执行上下文都有一个this

###### 改变this指向的三种方式：
- 通过函数的  call/apply/bing 方法设置
- 通过对象调用方法设置
  - 在全局环境中调用一个函数，this指向全局变量
  ~~~
  var obj = {
      showThis: function(){
          console.log(this)
      }
  }
  let foo = obj.showThis
  foo(); // this指向window
  ~~~ 
  - 通过对象调用函数，this指向对象本身
  ~~~
  var obj = {
      showThis: function(){
          console.log(this)
      }
  }
  obj.showThis（）// this指向obj
  obj.showThis.call(obj) 
  ~~~ 
  - 通过构造函数设置；构造函数中的this 会指向创建出来的实例对象
  ~~~
  function Person(){
      this.name = 'bar';
  }
  var p = new Person();
  console.log(p)
  ~~~
  > 使用new调用构造函数时，会先创建出一个空对象tempObj，然后call函数把构造函数中的this指针修改为这个空对象tempObj,执行完环境后，空对象也有了相关的属性，然后再将对象tempObj返回出去
  
  ~~~
  function Person() {
  this.name = 'zhar';
  return {};
  }
  var p = new Person();
  console.log(p.name);//undefined
  //--------------------------------------
  function Person() {
  this.name = 'zhar';
  return {name:'tom'};
  }
  var p = new Person();
  console.log(p.name);//tom      如果构造函数返回对象(Object,Array,Function)，那 this 将指向这个对象，其它基础类型则不受影响
  //--------------------------------------
  function Person() {
  this.name = 'zhar';
  return 1;//number string boolean 等
  }
  var p = new Person();
  console.log(p.name);//zhar
  ~~~

所以，如无必要我们通常不要设置构造函数的返回值

